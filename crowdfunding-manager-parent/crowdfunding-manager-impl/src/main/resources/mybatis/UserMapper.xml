<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.crowdfunding.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.crowdfunding.domain.User">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="loginacct" jdbcType="VARCHAR" property="loginacct"/>
        <result column="userpswd" jdbcType="CHAR" property="userpswd"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="createtime" jdbcType="CHAR" property="createtime"/>

        <collection property="roles" ofType="role">
            <id column="id" property="id"/>
            <result column="name" property="name"/>
        </collection>
    </resultMap>


    <delete id="deleteByPrimaryKey">
    delete from t_user
    where id = #{id,jdbcType=INTEGER}
    </delete>

    <insert id="insert" parameterType="com.crowdfunding.domain.User">
    insert into t_user (id, loginacct, userpswd, 
      username, email, createtime
      )
    values (#{id,jdbcType=INTEGER}, #{loginacct,jdbcType=VARCHAR}, #{userpswd,jdbcType=CHAR}, 
      #{username,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{createtime,jdbcType=CHAR}
      )
  </insert>


    <update id="updateByPrimaryKey" parameterType="com.crowdfunding.domain.User">
    update t_user
    set loginacct = #{loginacct,jdbcType=VARCHAR},
      userpswd = #{userpswd,jdbcType=CHAR},
      username = #{username,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      createtime = #{createtime,jdbcType=CHAR}
    where id = #{id,jdbcType=INTEGER}
    </update>


    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select id, loginacct, userpswd, username, email, createtime
    from t_user
    where id = #{id,jdbcType=INTEGER}
  </select>
    <select id="selectAll" resultMap="BaseResultMap">
    select id, loginacct, userpswd, username, email, createtime
    from t_user
  </select>

    <!--用户登录-->
    <select id="getUserByLogincct" resultMap="BaseResultMap">
    select id, loginacct, userpswd, username, email, createtime
    from t_user
    where loginacct = #{loginacct}
  </select>

    <select id="getAllUserByCondition" resultMap="BaseResultMap">
        SELECT t_user.*,t_role.name
        FROM t_user
        LEFT outer JOIN t_user_role ON t_user.id = t_user_role.userid
        LEFT  outer  JOIN t_role  ON t_role.id= t_user_role.roleid
    </select>

    <!--根据id查询用户所拥有的角色信息-->
    <select id="checkAssignedRole" resultType="role">
    select * from t_role where id  in (select roleid from t_user_role where  userid = #{id})
    </select>

    <!--根据id查询用户未拥有的角色信息-->
    <select id="checkNoAssignedRole" resultType="role">
    select id,name from t_role where id  not in (select roleid from t_user_role where  userid = #{id})
    </select>

    <insert id="savaUserRole">
        <foreach collection="roleVo.assignedRoleId" item="roleid" separator=";">
            insert into t_user_role(userid,roleid) value (#{userid},#{roleid})
        </foreach>
    </insert>

    <delete id="delUserRole">
        delete from t_user_role where userid=#{userid} and roleid in
        <foreach collection="roleVo.assignedRoleId" item="roleid" open="(" separator="," close=")">
            #{roleid}
        </foreach>
    </delete>

    <select id="getUser_Role" resultType="java.lang.Integer">
        SELECT * FROM t_user_role WHERE userid =#{id}
    </select>
</mapper>